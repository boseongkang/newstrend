name: trend-site

on:
  workflow_dispatch:
    inputs:
      lookback_days:
        description: Recent days to include
        required: false
        default: "30"

permissions:
  contents: read
  actions: read
  pages: write
  id-token: write

concurrency:
  group: trend-site
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e .

      - name: Download latest warehouse artifact
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: update-warehouse.yml
          workflow_conclusion: success
          branch: main
          name: warehouse
          path: artifacts
          search_artifacts: true
          if_no_artifact_found: error

      - name: Restore warehouse
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p data/warehouse data/metrics
          shopt -s nullglob
          for a in artifacts/*.zip artifacts/*.tgz artifacts/*.tar.gz; do
            case "$a" in
              *.zip) unzip -q "$a" -d artifacts ;;
              *)     tar -xzf "$a" -C artifacts ;;
            esac
          done
          shopt -u nullglob
          rsync -a artifacts/data/       data/               2>/dev/null || true
          rsync -a artifacts/warehouse/  data/warehouse/     2>/dev/null || true
          rsync -a artifacts/metrics/    data/metrics/       2>/dev/null || true
          rsync -a warehouse/            data/warehouse/     2>/dev/null || true
          rsync -a metrics/              data/metrics/       2>/dev/null || true
          if [ ! -f data/warehouse/master.jsonl ]; then
            f=$(find artifacts . -type f -name master.jsonl | head -1 || true)
            if [ -n "${f:-}" ]; then
              cp -f "$f" data/warehouse/master.jsonl
            fi
          fi
          test -f data/warehouse/master.jsonl || { echo "master.jsonl not restored"; find artifacts -maxdepth 4 -type f -print; exit 1; }

      - name: Resolve START/END from daily jsonl
        id: rng
        shell: bash
        env:
          LOOKBACK: ${{ inputs.lookback_days }}
        run: |
          set -euo pipefail
          START=$(python - <<'PY'
import glob, os, pandas as pd
fs=sorted(glob.glob("data/warehouse/daily/*.jsonl"))
n=int(os.getenv("LOOKBACK","30"))
print(os.path.basename(fs[-n])[:-6] if fs and len(fs)>=n else (os.path.basename(fs[0])[:-6] if fs else ""))
PY
)
          END=$(python - <<'PY'
import glob, os
fs=sorted(glob.glob("data/warehouse/daily/*.jsonl"))
print(os.path.basename(fs[-1])[:-6] if fs else "")
PY
)
          echo "start=${START}" >> "$GITHUB_OUTPUT"
          echo "end=${END}"     >> "$GITHUB_OUTPUT"

      - name: Aggregate and rising
        shell: bash
        run: |
          set -euo pipefail
          RUN="reports/auto_trends_existing/${GITHUB_RUN_ID}"
          mkdir -p "$RUN"
          python scripts/aggregate.py \
            --master data/warehouse/master.jsonl \
            --outdir "$RUN/aggregate" \
            --start "${{ steps.rng.outputs.start }}" --end "${{ steps.rng.outputs.end }}" \
            --weights   config/publisher_weights.json \
            --blacklist config/publisher_blacklist.txt \
            --extra_stop config/extra_noise.txt \
            --daily-cap 500
          python scripts/filter_tokens_csv.py \
            --in "$RUN/aggregate/tokens_by_day.csv" \
            --stop-file config/extra_noise.txt \
            --min-len 4 \
            --out "$RUN/tokens_by_day.cleaned.csv"
          python scripts/rising_from_tokens_csv.py \
            --tokens-csv "$RUN/tokens_by_day.cleaned.csv" \
            --start "${{ steps.rng.outputs.start }}" --end "${{ steps.rng.outputs.end }}" \
            --window 7 --min-total 20 --topk 500 \
            --outdir "$RUN/rising_csv"
          echo "RUN=$RUN" >> "$GITHUB_ENV"

      - name: Build site bundle
        shell: bash
        run: |
          set -euo pipefail
          RUNID="${GITHUB_RUN_ID}"
          SRC="reports/auto_trends_existing/${RUNID}"
          DEST="site"
          mkdir -p "$DEST/run"
          rsync -av "$SRC/" "$DEST/run/"
          python - <<'PY'
import os, html
root = "site/run"
os.makedirs("site", exist_ok=True)
with open("site/index.html","w",encoding="utf-8") as f:
    f.write("<meta charset='utf-8'><h1>News Trends</h1><ul>")
    for dp,_,fs in os.walk(root):
        fs=[x for x in fs if not x.startswith('.')]
        for fn in sorted(fs):
            rel=os.path.join(dp,fn).replace('site/','')
            f.write(f"<li><a href='{rel}'>{html.escape(rel)}</a></li>")
    f.write("</ul>")
PY

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - id: deployment
        uses: actions/deploy-pages@v4
