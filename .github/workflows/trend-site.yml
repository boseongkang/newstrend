name: trend-site

on:
  workflow_dispatch:
    inputs:
      lookback_days:
        description: "How many recent days to include"
        required: false
        default: "30"

permissions:
  contents: read
  pages: write
  id-token: write
  actions: read

concurrency:
  group: trend-site
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install
        run: |
          python -m pip install --upgrade pip
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e .

      - name: Download latest warehouse artifact
        id: dl_wh
        uses: dawidd6/action-download-artifact@v3
        with:
          workflow: update-warehouse.yml
          workflow_conclusion: success
          name: warehouse
          search_artifacts: true
          if_no_artifact_found: warn
          path: artifacts_warehouse

      - name: Restore warehouse
        run: |
          set -euo pipefail
          mkdir -p data/warehouse data/metrics
          if [ -d artifacts_warehouse/warehouse ]; then
            rsync -av artifacts_warehouse/warehouse/ ./ || true
          fi
          ls -l data/warehouse || true

      - name: Resolve START/END from daily jsonl
        id: rng
        env:
          LOOKBACK: ${{ inputs.lookback_days }}
        run: |
          set -euo pipefail
          START=$(python - <<'PY'
import glob, os
fs=sorted(glob.glob("data/warehouse/daily/*.jsonl"))
n=int(os.getenv("LOOKBACK","30"))
print(os.path.basename(fs[-n])[:-6] if fs and len(fs)>=n else (os.path.basename(fs[0])[:-6] if fs else ""))
PY
)
          END=$(python - <<'PY'
import glob, os
fs=sorted(glob.glob("data/warehouse/daily/*.jsonl"))
print(os.path.basename(fs[-1])[:-6] if fs else "")
PY
)
          echo "start=${START}" >> "$GITHUB_OUTPUT"
          echo "end=${END}"     >> "$GITHUB_OUTPUT"
          echo "range: $START..$END"

      - name: Aggregate and rising
        run: |
          set -euo pipefail
          OUT="reports/auto_trends_existing/$(date -u +%Y%m%d_%H%M%SZ)"
          python scripts/aggregate.py \
            --master data/warehouse/master.jsonl \
            --outdir "$OUT/aggregate" \
            --start "${{ steps.rng.outputs.start }}" --end "${{ steps.rng.outputs.end }}" \
            --weights   config/publisher_weights.json \
            --blacklist config/publisher_blacklist.txt \
            --extra_stop config/extra_noise.txt \
            --daily-cap 500

          python scripts/filter_tokens_csv.py \
            --in "$OUT/aggregate/tokens_by_day.csv" \
            --stop-file config/extra_noise.txt \
            --min-len 4 \
            --out "$OUT/tokens_by_day.cleaned.csv"

          python scripts/rising_from_tokens_csv.py \
            --tokens-csv "$OUT/tokens_by_day.cleaned.csv" \
            --start "${{ steps.rng.outputs.start }}" --end "${{ steps.rng.outputs.end }}" \
            --window 7 --min-total 20 --topk 500 \
            --outdir "$OUT/rising_csv"

          python scripts/join_prices.py \
            --terms "$OUT/aggregate/tokens_by_day.csv" \
            --map   config/ticker_aliases.json \
            --start "${{ steps.rng.outputs.start }}" --end "${{ steps.rng.outputs.end }}" \
            --out   "$OUT/prices_join"

          echo "$OUT" > .last_run_dir

      - name: Build site bundle
        run: |
          set -euo pipefail
          RUNID="${GITHUB_RUN_ID}"
          SRC="$(cat .last_run_dir)"
          DEST="site"
          mkdir -p "$DEST/run"
          rsync -av "$SRC/" "$DEST/run/"

          # 초간단 인덱스
          {
            echo '<!doctype html><meta charset="utf-8"><title>News Trends</title><h1>News Trends</h1>'
            echo '<ul>'
            find "$DEST/run" -type f | sed "s#^$DEST/##" | sort | while read -r p; do
              echo "<li><a href=\"$p\">$p</a></li>"
            done
            echo '</ul>'
          } > "$DEST/index.html"

      - name: Upload pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy:
    needs: build
    if: always()
    environment:
      name: github-pages
      url: ${{ needs.build.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: deployment
        uses: actions/deploy-pages@v4
